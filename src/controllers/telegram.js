import dotenv from 'dotenv';
dotenv.config();
import Stage from 'telegraf/stage.js';
import Telegraf from 'telegraf';
import Markup from 'telegraf/markup.js';
import session from 'telegraf/session.js';
import createBugScene from '../scenes/createBugScene.js';
import User from '../models/user.model.js';
import Task from '../models/task.model.js';

export const bot = new Telegraf(process.env.TELEGRAM_TOKEN);

bot.use(Telegraf.log());

export default {
  start: async () => {
    try {
      bot.start((ctx) =>
        ctx.reply(
          '–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞—Ä–µ–ø–æ—Ä—Ç–∏—Ç –±–∞–≥.\n–°–æ–±—â–∏—Ç–µ –≤–∞—à Telegram id –ì–î—É - ' +
            ctx.from.id,
          Markup.keyboard([['üêûBug report']])
            .resize()
            .extra()
        )
      );

      // –°–æ–∑–¥–∞–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä —Å—Ü–µ–Ω
      const stage = new Stage();
      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è —Å—Ü–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞–≥–∞
      stage.register(await createBugScene());
      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –Ω–æ–≤–∞—è —Å—Ü–µ–Ω–∞
      // stage.register(await newScene());
      stage.command('cancel', (ctx) => {
        ctx.reply(
          '–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞—Ä–µ–ø–æ—Ä—Ç–∏—Ç –±–∞–≥.\n–°–æ–±—â–∏—Ç–µ –≤–∞—à Telegram id –ì–î—É - ' +
            ctx.from.id,
          Markup.keyboard([['üêûBug report']])
            .resize()
            .extra()
        );
        ctx.scene.leave();
      });

      bot.use(session());
      bot.use(stage.middleware());

      //–§—Ä–∞–∑–∞ –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–π –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Å—Ü–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞–≥–∞
      bot.hears('üêûBug report', (ctx) => {
        //–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã
        ctx.scene.enter('bugReport');
      });

      bot.start(console.log('bot rab'));
      bot.launch();
    } catch (error) {
      console.log(error);
    }
  },
};

export const getImg = async (fileId) => {
  return bot.telegram.getFile(fileId).catch((err) => {
    return err;
  });
};

//–†–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
export const sendTaskTo = async (creator, progers, task) => {
  let text = `–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞\n<a href="${task.url}">${task.properties.Name.title[0].text.content}</a>`;
  switch (task.properties.Status.select.name) {
    
    case 'Validate':
      text = `–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫—É <a href="${task.url}">${task.properties.Name.title[0].text.content}</a>`;
      let gameDevs = await User.find({userType: "GD"})
      gameDevs = gameDevs.map(gd => {
        return bot.telegram
        .sendMessage(gd.telegramId, text, { parse_mode: 'HTML' })

      });
      return Promise.all(gameDevs)
  }
};

export const editTaskMessage = (task) => {
  return task.taskMessage.forEach((taskMessage) => {
    bot.telegram
      .editMessageText(
        taskMessage.userId,
        taskMessage.messageId,
        taskMessage.messageId,
        '–ó–∞–¥–∞—á—É –≤–∑—è–ª–∏'
      )
      .catch((err) => console.log(err));
  });
};

//–†–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –±–∞–≥–µ
export const sendBugTo = async (creator, progers, bug) => {
  let text = `–£ –≤–∞—Å –±–∞–≥üêû\n<a href="${bug.url}">${bug.properties.Name.title[0].text.content}</a>`;
  switch (bug.properties.Status.select.name) {
    case 'Not started':
      //–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
      if (progers === 'sendToAll') {
        progers = await User.find({ name: { $ne: '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' } });
      } else {
        progers = await User.find({
          name: {
            $in: progers.map((elem) => {
              return elem.name;
            }),
          },
        });
      }
        progers.forEach((proger) => {
          bot.telegram
            .sendMessage(proger.telegramId, text, { parse_mode: 'HTML' })
            .then(async (msg) => {
              Task.findOne({ taskId: bug.id }).then((bug) => {
                console.log(bug);
                bug.taskMessage.push({
                  messageId: msg.message_id,
                  userId: msg.chat.id,
                });
                bug.save();
              });
            })
            .catch((err) => console.log(err));
        });
      break;
    case 'Completed':
      text = `–ë–∞–≥ –∑–∞–∫—Ä—ã—Ç\n<a href="${bug.url}">${bug.properties.Name.title[0].text.content}</a>`;
 let gameDevs = await User.find({userType: "GD"})
      gameDevs.forEach(gd => {
        bot.telegram
        .sendMessage(gd.telegramId, text, { parse_mode: 'HTML' })
        .catch((err) => console.log(err));
      });
      break;
    case 'In progress':
      if (!bug.properties['–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'].multi_select[0]) {
        editTaskMessage(await Task.findOne({ taskId: bug.id }));
      }
      break;
  }
};

export const send24hReminder = async (progers, bug) => {
  let text = `<a href="https://www.notion.so/">–í –±–∞–≥—Ç—Ä–µ–∫–µ—Ä–µ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –±–∞–≥–∏</a>`;
  if (progers) {
    progers = await User.find({
      name: { $ne: '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' },
      userType: { $ne: 'GD' },
      timeStamp: { $lte: Date.now() - 86400000 },
    });
  } else {
    progers = await User.find({
      userType: { $ne: 'GD' },
      name: {
        $in: progers,
      },
      timeStamp: { $lte: Date.now() - 86400000 },
    });
  }

  for (const proger of progers) {
    proger.timeStamp = Date.now();
    await bot.telegram
      .sendMessage(proger.telegramId, text, { parse_mode: 'HTML' }).then(() => proger.save())
      .catch((err) => console.log(err));
       
  }
};
