import Extra from 'telegraf/extra.js';
import Markup from 'telegraf/markup.js';
import WizardScene from 'telegraf/scenes/wizard/index.js';
import {
  checkSceneOptions,
  createBug,
  getUserList,
  notion,
} from '../controllers/notion.js';
import imgbbController from '../controllers/imgbb.js';
import { getImg } from '../controllers/telegram.js';

export default async function () {
  return new WizardScene(
    //–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã
    'bugReport',
    //0. –ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–≥–∞
    async (ctx) => {
      ctx.wizard.state.options = await checkSceneOptions(
        process.env.NOTION_OPTIONS_DB
      );
      // –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ —ç—Ç–∞–ø–∞
      ctx.reply('–ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–≥–∞');
      //–ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö
      ctx.wizard.state.title = ctx.message.text;
      //–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
      if (!ctx.wizard.state.options.includes('–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç')) {
        return ctx.wizard.selectStep(3);
      }
      return ctx.wizard.next();
    },
    //1.–í—ã–±–æ—Ä –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    async (ctx) => {
      await ctx.reply(
        //–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        '–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç',
        //–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        Markup.keyboard([['P1üî•', 'P2', 'P3']])
          .oneTime()
          .resize()
          .extra()
      );
      //–ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö
      ctx.wizard.state.userId = ctx.message.from.id;
      //–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
      return ctx.wizard.next();
    },
    //2. –û–ø–∏—Å–∞–Ω–∏–µ –±–∞–≥–∞
    async (ctx) => {
      if (
        ctx.message.text !== 'P1üî•' &&
        ctx.message.text !== 'P2' &&
        ctx.message.text !== 'P3'
      ) {
        ctx.reply('–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç');
        return;
      } else {
        ctx.wizard.state.priority = ctx.message.text;
        ctx.reply(
          '–û–ø–∏—à–∏—Ç–µ –±–∞–≥ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏',
          Markup.keyboard([['–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å']])
            .oneTime()
            .resize()
            .extra()
        );
        //–ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –±–∞–≥–∞ –±–µ–∑ –≤—ã–±–æ—Ä–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏
        console.log(ctx.wizard.state.options);
        if (
          !ctx.wizard.state.options.includes('–∑–∞–ø—Ä–æ—Å –∫–∞—Ä—Ç–∏–Ω–∫–∏') &&
          !ctx.wizard.state.options.includes('–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏')
        ) {
          ctx.wizard.state.imgBlock = '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å';
          ctx.wizard.state.user = '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å';
          return ctx.wizard.selectStep(8);
        }
        //–ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏
        if (!ctx.wizard.state.options.includes('–∑–∞–ø—Ä–æ—Å –∫–∞—Ä—Ç–∏–Ω–∫–∏')) {
          ctx.wizard.state.imgBlock = '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å';
          return ctx.wizard.selectStep(6);
        }
        //–ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ä—Ç–∏–Ω–∫–∏
        return ctx.wizard.selectStep(4);
      }
    },
    //2.1 –û–ø–∏—Å–∞–Ω–∏–µ –±–∞–≥–∞, –µ—Å–ª–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–∫–∏–ø–Ω—É—Ç
    async (ctx) => {
      //–ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö
      ctx.wizard.state.title = ctx.message.text;
      ctx.wizard.state.priority = '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å';
      ctx.reply(
        '–û–ø–∏—à–∏—Ç–µ –±–∞–≥ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏',
        Markup.keyboard([['–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å']])
          .oneTime()
          .resize()
          .extra()
      );
      //–ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –±–∞–≥–∞ –±–µ–∑ –≤—ã–±–æ—Ä–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏
      console.log(ctx.wizard.state.options);
      if (
        !ctx.wizard.state.options.includes('–∑–∞–ø—Ä–æ—Å –∫–∞—Ä—Ç–∏–Ω–∫–∏') &&
        !ctx.wizard.state.options.includes('–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏')
      ) {
        ctx.wizard.state.imgBlock = '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å';
        ctx.wizard.state.user = '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å';
        return ctx.wizard.selectStep(8);
      }

      //–ü—Ä–æ–ø—É—Å–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏
      if (!ctx.wizard.state.options.includes('–∑–∞–ø—Ä–æ—Å –∫–∞—Ä—Ç–∏–Ω–∫–∏')) {
        ctx.wizard.state.imgBlock = '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å';
        return ctx.wizard.selectStep(6);
      }
      //–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
      return ctx.wizard.next();
    },
    //3. –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏
    async (ctx) => {
      try {
        //–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        if (ctx.message.text !== '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å') {
          //–ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö
          ctx.wizard.state.textBlock = ctx.message.text;
        } else {
          //–ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö
          ctx.wizard.state.textBlock = '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å';
        }
        //–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
        ctx.reply(
          '–ü—Ä–∏—à–ª–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É',
          Markup.keyboard([['–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å']])
            .oneTime()
            .resize()
            .extra()
        );
        //–ü—Ä–æ–ø—É—Å–∫ –≤—ã–±–æ—Ä–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        if (!ctx.wizard.state.options.includes('–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏')) {
          ctx.wizard.state.user = '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å';
          return ctx.wizard.selectStep(9);
        }
        return ctx.wizard.next();
      } catch (error) {
        console.log(error);
      }
    },
    //4. –í—ã–±–æ—Ä –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    async (ctx) => {
      try {
        //–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        if (ctx.message.text !== '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å') {
          //–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏, –∑–∞–ø–∏—Å—å
          ctx.wizard.state.imgBlock = await imgbbController(
            await getImg(ctx.message.photo[2].file_id)
          );
          if (!ctx.message.photo) {
            ctx.reply('–ü—Ä–∏—à–ª–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É');
            return;
          }
        } else {
          ctx.wizard.state.imgBlock = '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å';
        }
        //–ü–æ–∏—Å–∫ –∏–º–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
        let users = (await getUserList()).map((i) => {
          return i.Name.title[0].plain_text;
        });
        ctx.reply(
          '–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è',
          Extra.markup(
            Markup.keyboard(users, {
              wrap: (btn, index) => index % 2 !== 0,
            }).resize()
          )
        );
        //–ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –æ–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è—Ö
        ctx.wizard.state.users = (await getUserList()).map((i) => {
          return i;
        });
        return ctx.wizard.selectStep(7);
      } catch (error) {
        //–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è
        ctx.reply(
          '‚ùóÔ∏è–û—à–∏–±–∫–∞',
          Markup.keyboard([['üêûBug report']])
            .resize()
            .extra()
        );
        ctx.scene.leave();
        console.log(error);
      }
    },
    //4.1 –í—ã–±–æ—Ä –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, –µ—Å–ª–∏ —Å–∫–∏–ø–Ω—É–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É
    async (ctx) => {
      try {
        //–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        if (ctx.message.text !== '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å') {
          //–ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö
          ctx.wizard.state.textBlock = ctx.message.text;
        } else {
          //–ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö
          ctx.wizard.state.textBlock = '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å';
        }
        //–ü–æ–∏—Å–∫ –∏–º–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
        let users = (await getUserList()).map((i) => {
          return i.Name.title[0].plain_text;
        });
        ctx.reply(
          '–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è',
          Extra.markup(
            Markup.keyboard(users, {
              wrap: (btn, index) => index % 2 !== 0,
            }).resize()
          )
        );
        //–ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –æ–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è—Ö
        ctx.wizard.state.users = (await getUserList()).map((i) => {
          return i;
        });
        ctx.wizard.next();
      } catch (error) {
        //–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è
        ctx.reply(
          '‚ùóÔ∏è–û—à–∏–±–∫–∞',
          Markup.keyboard([['üêûBug report']])
            .resize()
            .extra()
        );
        ctx.scene.leave();
        console.log(error);
      }
    },
    //–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ —ç—Ç–∞–ø–∞
    async (ctx) => {
      try {
        //–ó–∞–ø–∏—Å—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        ctx.wizard.state.user = ctx.message.text;
        ctx.wizard.state.userId = await notion
          .search({ query: ctx.message.text })
          .then((res) => {
            return res.results[0].properties[
              'telegram ID'
            ].rich_text[0].plain_text.split(',');
          });
        await createBug(
          ctx.wizard.state.title,
          ctx.wizard.state.imgBlock,
          ctx.wizard.state.textBlock,
          ctx.wizard.state.priority,
          ctx.wizard.state.user
        );
        //–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        await ctx.reply(
          '–ë–∞–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
          Markup.keyboard([['üêûBug report']])
            .resize()
            .extra()
        );
        return ctx.scene.leave();
      } catch (error) {
        console.log(error);
        //–°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ —É—Å–ø–µ—Ö–µ
        ctx.reply(
          '‚ùóÔ∏è–ë–∞–≥ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
          Markup.keyboard([['üêûBug report']])
            .resize()
            .extra()
        );
        return ctx.scene.leave();
      }
    },
    //8. –û—Ç–ø—Ä–∞–≤–∫–∞ –±–∞–≥–∞, –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏, —Å —Ç–µ–∫—Å—Ç–æ–º
    async (ctx) => {
      try {
        ctx.wizard.state.textBlock = ctx.message.text;
        //–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±–∞–≥–∞ –≤ –Ω–æ—É—à–µ–Ω–µ
        await createBug(
          ctx.wizard.state.title,
          ctx.wizard.state.imgBlock,
          ctx.wizard.state.textBlock,
          ctx.wizard.state.priority,
          ctx.wizard.state.user
        );
        //–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        await ctx.reply(
          '–ë–∞–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
          Markup.keyboard([['üêûBug report']])
            .resize()
            .extra()
        );
        return ctx.scene.leave();
      } catch (error) {
        console.log(error);
        //–°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ —É—Å–ø–µ—Ö–µ
        ctx.reply(
          '‚ùóÔ∏è–ë–∞–≥ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
          Markup.keyboard([['üêûBug report']])
            .resize()
            .extra()
        );
        return ctx.scene.leave();
      }
    },
    //9. –û—Ç–ø—Ä–∞–≤–∫–∞ –±–∞–≥–∞ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –±–µ–∑ –≤—ã–±–æ—Ä–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    async (ctx) => {
      try {
        //–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        if (ctx.message.text !== '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å') {
          //–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏, –∑–∞–ø–∏—Å—å
          ctx.wizard.state.imgBlock = await imgbbController(
            await getImg(ctx.message.photo[2].file_id)
          );
          if (!ctx.message.photo) {
            ctx.reply('–ü—Ä–∏—à–ª–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É');
            return;
          }
        } else {
          ctx.wizard.state.imgBlock = '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å';
        }
        //–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±–∞–≥–∞ –≤ –Ω–æ—É—à–µ–Ω–µ
        await createBug(
          ctx.wizard.state.title,
          ctx.wizard.state.imgBlock,
          ctx.wizard.state.textBlock,
          ctx.wizard.state.priority,
          ctx.wizard.state.user
        );
        //–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        await ctx.reply(
          '–ë–∞–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
          Markup.keyboard([['üêûBug report']])
            .resize()
            .extra()
        );
        return ctx.scene.leave();
      } catch (error) {
        console.log(error);
        //–°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ —É—Å–ø–µ—Ö–µ
        ctx.reply(
          '‚ùóÔ∏è–ë–∞–≥ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
          Markup.keyboard([['üêûBug report']])
            .resize()
            .extra()
        );
        return ctx.scene.leave();
      }
    }
  );
}

export const newScene = () => {
  return new WizardScene(
    //–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã
    '–ù–∞–∑–≤–∞–Ω–∏–µ',
    //–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ —ç—Ç–∞–ø–∞
    (ctx) => {
      ctx.reply(
        //–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        '–¢–µ–∫—Å—Ç',
        //–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        Markup.keyboard([['–ö–Ω–æ–ø–∫–∞1', '–ö–Ω–æ–ø–∫–∞2', '–ö–Ω–æ–ø–∫–∞3']])
          .oneTime()
          .resize()
          .extra()
      );
      //–ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö
      ctx.wizard.state.DATA = ctx.DATA;
      //–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
      return ctx.wizard.next();
    },
    //–ù–æ–≤—ã–π —ç—Ç–∞–ø
    async (ctx) => {}
  );
};
